{"version":3,"sources":["chat.js"],"names":["window","document","undefined","removeLoadListeners","removeEventListener","initChat","removeElementsIdAndSecondClass","container","tagName","elements","getElementsByTagName","i","length","removeAttribute","setAttribute","getAttribute","split","selectUserHandler","users","lastChild","onclick","evt","stopPropagation","setText","deleteMe","getText","target","parentNode","slice","show","newUserDeletionDiv","initAjax","this","readyState","status","responseText","reloadPage","setError","Content-type","usNick","spamDetector","spamDetected","currentTime","Math","floor","Date","spamDetectorDate","spamDetectorCounter","enLang","W_0","W_1","W_2","W_3","W_4","W_5","W_6","W_7","W_8","W_9","W_10","heLang","getElementById","value","langReference","chatForm","errorParagraph","closeErrorParagraph","hide","messagesContainer","communicationSection","usMessage","usersTable","roomsList","checkAndSetValidRoom","messagesInRooms","cancelRoomDiv","approveRoomDiv","newRoomDiv","userToInvite","newInvitationDiv","cancelInvitationDiv","approveInvitationDiv","invitationForm","newKickDiv","cancelKickDiv","approveKickDiv","kickMe","newRoomDeletionDiv","cancelRoomDeletionDiv","approveRoomDeletionDiv","deleteThisRoom","roomDeletionForm","deleteRoomApproveCancel","kickApproveCancel","roomApproveCancel","invitationApproveCancel","onkeyup","colors","regExpPatterns","setInterval","currentRoomInnerText","splitResult","messages","newRooms","removedRooms","rank","parseInt","currentRoom","insertMessagesToRooms","appendMessages","plusDisplayHandler","sortRemoveAddRooms","innerHTML","addRowsHandler","addRoomsHandler","ajaxCounter","onsubmit","test","trim","focus","registrationForm","mainUserSelection","newCodeButton","usCode","codeImg","src","cancelUserDeletionDiv","approveUserDeletionDiv","deleteUserApproveCancel","roomId","setCurrentRoom","roomContext","newRoom","getRoomByInnerText","firstInvitedDiv","userSwitchDiv","minusDivIndex","allDivs","k","scrollTopFlag","alreadyExistPattern","getAlreadyExistPattern","tmpDiv","createElement","allNewRooms","RegExp","insertBefore","cloneNode","nextSibling","removedRoomsPattern","j","splice","removeChild","style","height","clientHeight","scrollTop","minusDisplayHandler","approveCancel","display","url","changeFunction","syn","method","headers","paramsObject","xhr","XMLHttpRequest","ActiveXObject","onreadystatechange","open","headerKey","hasOwnProperty","setRequestHeader","paramsString","paramKey","send","plusDivIndex","location","href","protocol","host","pathname","element","miliseconds","intrv","opacity","toString","clearInterval","savedHandlers","currentApproveCancel","field","pattern","errorCode","console","log","errorText","afterSplit","pop","idExtractor","exec","push","tableContainer","currentRow","kickTds","getElementsByClassName","firstChild","currentRoomId","insertedHtml","text","innerText","textContent","id","noUsers","returnedRoom","returnedPattern","addEventListener"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,GAuGA,QAAAC,KACAF,EAAAG,oBAAA,mBAAAC,GAAA,GACAL,EAAAI,oBAAA,OAAAC,GAAA,GAGA,QAAAC,GAAAC,EAAAC,GAGA,IAAA,GAFAC,GAAAF,EAAAG,qBAAAF,GAEAG,EAAAF,EAAAG,OAAA,EAAAD,GAAA,IAAAA,EACAF,EAAAE,GAAAE,gBAAA,MACAJ,EAAAE,GAAAG,aAAA,QAAAL,EAAAE,GAAAI,aAAA,SAAAC,MAAA,KAAA,IAsCA,QAAAC,GAAAV,GAIA,IAAA,GAFAW,GAAAX,EAAAG,qBAAA,MAEAC,EAAA,EAAAA,EAAAO,EAAAN,SAAAD,EAEAO,EAAAP,GAAAQ,UAAAC,QAAA,SAAAC,GAKAA,EAAAC,kBAGAC,EAAAC,GAAAC,EAAAJ,EAAAK,OAAAC,YAAAC,MAAA,EAAA,KACAC,EAAAC,GAAA,KAGAZ,EAAAP,GAAAS,QAAA,SAAAC,GACAU,EAAA,8BAAA,WAEA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,SACA,MAAAF,KAAAG,aACAC,IAEAC,EAAAL,KAAAG,iBAIA,EAAA,QAAAG,eAAA,qDAKAC,OAAAd,EAAAJ,EAAAK,QAAAE,MAAA,EAAA,OAKA,QAAAY,KAEA,GAAAC,IAAA,EAKAC,EAAAC,KAAAC,MAAA,GAAAC,MAAA,IAUA,IARA,OAAAC,GAAA,IACAA,GAAA,GAAAJ,EACAI,GAAA,GAAAJ,IAEAI,GAAA,GAAAA,GAAA,GACAA,GAAA,GAAAJ,GAGAI,GAAA,GAAA,GAAAA,GAAA,GACAC,GAAA,GAAA,MACA,IAAAD,GAAA,GAAA,IAAAA,GAAA,GACAC,GAAA,GAAA,OACA,IAAAD,GAAA,GAAA,IAAAA,GAAA,GACAC,GAAA,GAAA,OACA,CAAA,GAAAD,GAAA,GAAA,IAAAA,GAAA,GAIA,MADAC,IAAA,GAAA,GACA,CAHAA,IAAA,GAAA,GAMA,OAAAA,GAAA,IACA,IAAA,GACAA,GAAA,IAAA,EAAAN,GAAA,EACA,IAAAM,GAAA,KAAAA,GAAA,GAAAA,GAAA,GAAA,CACA,MACA,KAAA,IACAA,GAAA,IAAA,GAAAN,GAAA,EACA,KAAAM,GAAA,KAAAA,GAAA,GAAAA,GAAA,GAAA,EACA,MACA,KAAA,IACAA,GAAA,IAAA,GAAAN,GAAA,EACA,KAAAM,GAAA,KAAAA,GAAA,GAAAA,GAAA,GAAA,EACA,MACA,KAAA,IACAA,GAAA,IAAA,GAAAN,GAAA,EACA,KAAAM,GAAA,KAAAA,GAAA,GAAAA,GAAA,GAAA,GAIA,MAAAN,GAGA,QAAApC,KAGA,GAAA2C,IAEAC,IAAA,iCACAC,IAAA,6CACAC,IAAA,qEACAC,IAAA,sDACAC,IAAA,mDACAC,IAAA,qBACAC,IAAA,mDACAC,IAAA,2CACAC,IAAA,aACAC,IAAA,gBACAC,KAAA,8CAIAC,GAEAX,IAAA,sCACAC,IAAA,mDACAC,IAAA,sEACAC,IAAA,wFACAC,IAAA,iCACAC,IAAA,oBACAC,IAAA,8CACAC,IAAA,8BACAC,IAAA,YACAC,IAAA,cACAC,KAAA,yBAGA,QAAA1D,EAAA4D,eAAA,QAAAC,OAEA,IAAA,KACAC,GAAAH,CACA,MAEA,SACAG,GAAAf,EAKA7C,IAGA6D,EAAA/D,EAAA4D,eAAA,YACAI,EAAAhE,EAAA4D,eAAA,iBAGA,IAAAK,GAAAjE,EAAA4D,eAAA,sBASA,IANA,OAAAK,IACAA,EAAA9C,QAAA,WACA+C,EAAAF,EAAA,MAIA,OAAAD,EAEAI,EAAAnE,EAAA4D,eAAA,qBACAQ,EAAApE,EAAA4D,eAAA,wBACAS,EAAArE,EAAA4D,eAAA,WACAU,EAAAtE,EAAA4D,eAAA,cACAW,EAAAvE,EAAA4D,eAAA,aAOAY,EAAAD,EAAA,IAAAE,IAEAC,EAAA1E,EAAA4D,eAAA,iBACAe,EAAA3E,EAAA4D,eAAA,kBACAgB,EAAA5E,EAAA4D,eAAA,cAEAiB,EAAA7E,EAAA4D,eAAA,gBACAkB,EAAA9E,EAAA4D,eAAA,oBACAmB,EAAA/E,EAAA4D,eAAA,uBACAoB,EAAAhF,EAAA4D,eAAA,wBACAqB,EAAAjF,EAAA4D,eAAA,kBAEAsB,EAAAlF,EAAA4D,eAAA,cACAuB,EAAAnF,EAAA4D,eAAA,iBACAwB,EAAApF,EAAA4D,eAAA,kBACAyB,EAAArF,EAAA4D,eAAA,UAEA0B,EAAAtF,EAAA4D,eAAA,sBACA2B,EAAAvF,EAAA4D,eAAA,yBACA4B,EAAAxF,EAAA4D,eAAA,0BACA6B,GAAAzF,EAAA4D,eAAA,kBACA8B,GAAA1F,EAAA4D,eAAA,oBAEA4B,EAAArE,QAAA,WACAwE,GAAA,EAAAL,IAGAC,EAAApE,QAAA,WACAwE,GAAA,EAAAL,IAGAF,EAAAjE,QAAA,WACAyE,GAAA,EAAAV,IAGAC,EAAAhE,QAAA,WACAyE,GAAA,EAAAV,IAGAP,EAAAxD,QAAA,WACA0E,GAAA,EAAAjB,IAGAF,EAAAvD,QAAA,WACA0E,GAAA,EAAAjB,IAGAI,EAAA7D,QAAA,WACA2E,GAAA,EAAAhB,IAGAC,EAAA5D,QAAA,WACA2E,GAAA,EAAAhB,IAGAT,EAAA0B,QAAA,WACAC,EAAA3B,EAAA4B,GAAA5B,YASA6B,YAAA,WAEApE,EAAA,uBAAA,WAEA,GAAA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,OAEA,GAAA,OAAAF,KAAAG,aACAC,QACA,CACA,GASAgE,GATAC,EAAArE,KAAAG,aAAAnB,MAAA,OAEAsF,EAAAD,EAAA,GACAnF,EAAAmF,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAC,SAAAL,EAAA,IAEAM,EAAA1G,EAAA4D,eAAA,cASAuC,GADA,OAAAO,EACAlF,EAAAkF,GAEA,IAGAC,EAAAN,EAAA5B,IACAmC,EAAAnC,GAAA0B,GACAU,EAAAtC,EAAAiC,GACAM,EAAAvC,EAAA+B,EAAAC,EAAAJ,GACA7B,EAAAyC,UAAA9F,EACA+F,EAAA1C,GACA2C,EAAA1C,EAAAE,OAIA,EAAA,QAAApC,eAAA,qDACA6E,YAAAA,OACAA,IAEA,KAEAnD,EAAAoD,SAAA,WA2BA,MA1BA5E,KAuBAH,EAAA,GAtBA6D,GAAA5B,UAAA+C,KAAA/C,EAAAR,QAAAQ,EAAAR,MAAAwD,OAAA1G,OAAA,EACAmB,EAAA,0BAAA,WAEA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,SAEA,MAAAF,KAAAG,cAAAE,EAAA,GAEAiC,EAAAR,MAAA,GACAmC,EAAA3B,EAAA4B,GAAA5B,cAGA,EAAA,QAAAhC,eAAA,qDACAgC,UAAAA,EAAAR,SAMAmC,EAAA3B,EAAA4B,GAAA5B,WACAA,EAAAiD,UAMA,OAEA,CAEAC,GAAAvH,EAAA4D,eAAA,mBACA,IAAA4D,GAAAxH,EAAA4D,eAAA,oBAEA,QAAA2D,KACAA,GAAAvH,EAAA4D,eAAA,oBACAtB,GAAAtC,EAAA4D,eAAA,UACA6D,GAAAzH,EAAA4D,eAAA,iBACA8D,GAAA1H,EAAA4D,eAAA,UACA+D,GAAA3H,EAAA4D,eAAA,WASA6D,GAAAtG,QAAA,WACAwG,GAAAC,IAAA,sBAAA,GAAAhF,MAAA,KAGAN,GAAAyD,QAAA,WACAC,EAAA1D,GAAA2D,GAAA3D,SAGAiF,GAAAJ,SAAA,WAEA,MAAAlB,IAAA3D,OAAA8E,KAAA9E,GAAAuB,QAYA,GANAmC,EAAA1D,GAAA2D,GAAA3D,QACAA,GAAAgF,QACAI,GAAAE,IAAA,sBAAA,GAAAhF,MAAA,KAEA,KAMA,OAAA4E,IAEA3F,GAAA7B,EAAA4D,eAAA,sBACAiE,GAAA7H,EAAA4D,eAAA,yBACArC,GAAAvB,EAAA4D,eAAA,YACAkE,GAAA9H,EAAA4D,eAAA,0BAEAkE,GAAA3G,QAAA,WACA4G,GAAA,EAAAlG,KAGAgG,GAAA1G,QAAA,WACA4G,GAAA,EAAAlG,KAGAb,EAAAwG,KAKA,QAAAhD,GAAAlE,EAAA0H,EAAAvD,GACA3C,EAAA,yBAAA,WACA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,QACA,MAAAF,KAAAG,cACA+F,EAAA3H,EAAAyB,KAAAG,aAAAnB,MAAA,KAAA,GAAAgB,KAAAG,aAAAnB,MAAA,KAAA,GAAA0D,KAEA,EAAA,QAAApC,eAAA,qDACA2F,OAAAA,IAGA,QAAAC,GAAA3H,EAAA4H,EAAAF,EAAAvD,GAEA,GAAA0D,GAAAC,EAAA9H,EAAA0H,EAEAG,IACA9H,EAAAC,EAAA,OACA6H,EAAAtH,aAAA,KAAA,eACA+F,EAAAnC,EAAAuD,GACA,QAAAE,GAAAC,EAAAtH,aAAA,QAAAsH,EAAArH,aAAA,SAAA,sBAEAsB,EAAA,GAIA,QAAA0E,GAAAvC,EAAA+B,EAAAC,EAAAJ,GAMA,IAAA,GAJAkC,GACAC,EACAC,EAHAC,EAAAjE,EAAA9D,qBAAA,OAKAgI,EAAA,EAAAA,EAAAD,EAAA7H,SAAA8H,EACA,YAAAD,EAAAC,GAAA3H,aAAA,SAIAuH,EAAAG,EAAAC,GACA,OAAAjH,EAAAgH,EAAAC,IAEAH,EAAAE,EAAAC,GACA,MAAAjH,EAAAgH,EAAAC,MAEAF,EAAAE,EAIA,IAAA,KAAAnC,EAAA,CAEAoC,IAAA,CAEA,IAAAC,GAAAC,EAAArE,GAOAsE,EAAA7I,EAAA8I,cAAA,MACAD,GAAA9B,UAAAT,CAIA,KAAA,GAFAyC,GAAAF,EAAApI,qBAAA,OAEAC,EAAA,EAAAA,EAAAqI,EAAApI,SAAAD,EAEA,GAAAsI,QAAAL,GAAAvB,KAAA5F,EAAAuH,EAAArI,OAEA,YAAAqI,EAAArI,GAAAI,aAAA,SACAuH,IAAApI,EACAsE,EAAA0E,aAAAF,EAAArI,GAAAwI,WAAA,GAAA,MAEAb,EAAA3G,WAAAuH,aAAAF,EAAArI,GAAAwI,WAAA,GAAAb,GAEA,QAAAU,EAAArI,GAAAI,aAAA,UACAwH,EAAA5G,WAAAuH,aAAAF,EAAArI,GAAAwI,WAAA,GAAAZ,EAAAa,cAKA,GAAA,KAAA5C,EAAA,CACAmC,IAAA,CAOA,KAAA,GAFAU,GAAA,GAAAJ,QAAAzC,GAEA8C,EAAAb,EAAA7H,OAAA,EAAA0I,GAAA,IAAAA,EACAD,EAAAhC,KAAA5F,EAAAgH,EAAAa,OAIA7H,EAAAgH,EAAAa,MAAAlD,GAEA3B,EAAAD,EAAA,IAAAE,IASAA,GAAA6E,OAAA9H,EAAAgH,EAAAa,IAAA,GACA9E,EAAAgF,YAAAf,EAAAa,KAKAlF,EAAAqF,MAAAC,QAAAlF,EAAAmF,aAAA,IAAAnF,EAAAmF,aAAA,KAAA,KACAhB,KAAAvE,EAAAwF,UAAAxF,EAAAuF,cACAE,EAAArF,EAAAgE,GAGA,QAAAzC,GAAA+D,EAAA/E,GAEA+E,GAAA,UAAA5E,EAAAuE,MAAAM,SAEAhI,EAAA,6BAAA,WAEA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,QACA,MAAAF,KAAAG,cAAAE,EAAAL,KAAAG,gBAEA,EAAA,QAAAG,eAAA,qDACAwC,aAAAA,EAAAhB,QAcAK,EAAAY,EAAA,IAGA,QAAAa,GAAAkE,EAAAvE,GACAuE,GACA/H,EAAA,0BAAA,WACA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,QACA,MAAAF,KAAAG,cAAAE,EAAAL,KAAAG,gBAEA,EAAA,QAAAG,eAAA,qDACAoD,eAAAA,GAAA5B,QAIAK,EAAAoB,EAAA,IAIA,QAAAM,GAAAiE,EAAA3E,GACA2E,GACA/H,EAAA,uBAAA,WACA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,QACA,MAAAF,KAAAG,cAAAE,EAAAL,KAAAG,gBAEA,EAAA,QAAAG,eAAA,qDACAgD,OAAA7D,EAAA6D,KAIAnB,EAAAgB,EAAA,IAGA,QAAAW,GAAAgE,EAAAjF,GACAiF,GACA/H,EAAA,0BAAA,WAEA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,QACA,MAAAF,KAAAG,cAAAE,EAAAL,KAAAG,gBAEA,EAAA,QAAAG,eAAA,wDAIA6B,EAAAU,EAAA,IAGA,QAAAmD,GAAA8B,EAAAhI,GACAgI,GACA/H,EAAA,0BAAA,WAEA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,SAEA,MAAAF,KAAAG,aACAC,IAEAC,EAAAL,KAAAG,iBAIA,EAAA,QAAAG,eAAA,qDACAd,SAAAC,EAAAD,MAIA2C,EAAArC,EAAA,IAGA,QAAAC,GAAAiI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,GAAAC,EAGAA,GADAtK,EAAAuK,eACA,GAAAA,gBAEA,GAAAC,eAAA,qBAGAF,EAAAG,mBAAAR,EAEAK,EAAAI,KAAAP,EAAAH,EAAAE,EAEA,KAAA,GAAAS,KAAAP,GACAA,EAAAQ,eAAAD,IACAL,EAAAO,iBAAAF,EAAAP,EAAAO,GAGA,IAAAG,GAAA,EAEA,KAAA,GAAAC,KAAAV,GACAA,EAAAO,eAAAG,KACAD,GAAAC,EAAA,IAAAV,EAAAU,GAAA,IAGAD,GAAAA,EAAAlJ,MAAA,EAAA,IAEA0I,EAAAU,KAAAF,GAGA,QAAAjB,GAAArF,EAAAgE,GAKA,IAAA,GAJAC,GAAAjE,EAAA9D,qBAAA,OAEAqJ,EAAA,OAEApJ,EAAA,EAAAA,EAAA8H,EAAA7H,SAAAD,EAEA,GAAA,QAAA8H,EAAA9H,GAAAI,aAAA,UAAA,yBAAA0H,EAAA9H,GAAAI,aAAA,SAAA,CACAgJ,EAAA,OACA,OAIAtB,EAAAD,GAAAiB,MAAAM,QAAAA,EAGA,QAAAjD,GAAAtC,EAAAiC,GAIA,IAAA,GAFAwE,GADAxC,EAAAjE,EAAA9D,qBAAA,OAGAC,EAAA,EAAAA,EAAA8H,EAAA7H,SAAAD,EACA,GAAA,MAAAc,EAAAgH,EAAA9H,IAAA,CACAsK,EAAAtK,CACA,OAIA8H,EAAAwC,GAAAxB,MAAAM,QAAAtD,EAAA,EAAA,QAAA,OAIA,QAAArE,KAEApC,EAAAkL,SAAAC,KAAAnL,EAAAkL,SAAAE,SAAA,KAAApL,EAAAkL,SAAAG,KAAArL,EAAAkL,SAAAI,SAYA,QAAAzJ,GAAA0J,EAAAC,GACAD,EAAA9B,MAAAM,QAAA,OACA,IAAAT,GAAA,GACAmC,EAAAtF,YAAA,WAEAoF,EAAA9B,MAAAiC,QAAApC,EAAAqC,WACArC,EAAA,GAAAsC,cAAAH,GACAnC,GAAA,IACAkC,GAGA,QAAArH,GAAAoH,EAAAC,GAWA,IAAA,GAJAK,MAEAC,EAAAP,EAAA7K,qBAAA,QAEAC,EAAA,EAAAA,EAAAmL,EAAAlL,SAAAD,EACAkL,EAAAlL,GAAAmL,EAAAnL,GAAAS,QACA0K,EAAAnL,GAAAS,QAAA,IAGA,IAAAkI,GAAA,GACAmC,EAAAtF,YAAA,WAGA,GADAoF,EAAA9B,MAAAiC,QAAApC,EAAAqC,WACA,EAAArC,EAAA,CACAiC,EAAA9B,MAAAM,QAAA,EAGA,KAAA,GAAApJ,GAAA,EAAAA,EAAAmL,EAAAlL,SAAAD,EACAmL,EAAAnL,GAAAS,QAAAyK,EAAAlL,EAGAiL,eAAAH,GAEAnC,GAAA,IAEAkC,GAGA,QAAAvF,GAAA8F,EAAAC,GACA,KAAAD,EAAAjI,OAAA,IAAAiI,EAAAjI,MAAAwD,OAAA1G,OACAmL,EAAAjL,aAAA,QAAA,WACAkL,EAAA3E,KAAA0E,EAAAjI,OACAiI,EAAAjL,aAAA,QAAA,SAEAiL,EAAAjL,aAAA,QAAA,WAqBA,QAAAuB,GAAA4J,GACAC,QAAAC,IAAAF,GAKA,gBAAAA,KAOAA,EALA,IAAAA,EAAArL,OAKA,GAGA8F,SAAAuF,GAOA,IAAAG,EAEA,QAAAH,GAKA,IAAA,GACA7J,GACA,MACA,KAAA,GACAgK,GAAA,CACA,MACA,KAAA,GACAA,GAAA,CACA,MACA,KAAA,GACAA,EAAArI,GAAA,GACA,MACA,KAAA,GACAqI,GAAA,CACA,MACA,KAAA,GACAA,GAAA,CACA,MACA,KAAA,GACAA,GAAA,CACA,MACA,KAAA,GACAA,GAAA,CACA,MACA,KAAA,GACAA,GAAA,CACA,MACA,KAAA,GACAA,GAAA,CACA,MACA,KAAA,GACAA,GAAA,CACA,MACA,KAAA,IACAA,EAAArI,GAAA,GACA,MACA,KAAA,IACAqI,GAAA,CACA,MACA,KAAA,IACAA,GAAA,CACA,MACA,KAAA,IACAA,GAAA,CACA,MACA,KAAA,IACAA,GAAA,CACA,MACA,KAAA,IACAA,EAAArI,GAAA,GACA,MACA,KAAA,IACAqI,GAAA,CACA,MACA,KAAA,IAIAA,EAAArI,GAAA,GACA,MACA,KAAA,IAMAqI,GAAA,CACA,MAGA,KAAA,IAEAA,EAAArI,GAAA,IAEA,MAEA,SACAqI,EAAArI,GAAA,IAGAqI,KAAA,IAAAA,EAAArI,GAAA,KAEAqI,KAAA,IAAAA,EAAArI,GAAA,KAEAE,EAAA+C,UAAAoF,EAAA,UAAArI,GAAA,IAAA,UAAAkI,EAAA,gBAAAlI,GAAA,IAAA,sCAEA9D,EAAA4D,eAAA,uBAAAzC,QAAA,WACA+C,EAAAF,EAAA,KAGApC,EAAAoC,EAAA,IAGA,QAAA2C,GAAAN,EAAA5B,GASA,GAAA2H,GAAA/F,EAAAtF,MAAA,SAIA,IAFAqL,EAAAC,MAEAD,EAAAzL,OAAA,EAAA,CAEA+H,IAAA,CAGA,KAAA,GAFAV,GAEAtH,EAAA,EAAAA,EAAA0L,EAAAzL,SAAAD,EACAsH,EAAA/B,GAAAqG,YAAAC,KAAAH,EAAA1L,IAAA,GAEAsH,IAAAvD,KACAA,EAAAuD,OAEAvD,EAAAuD,GAAAwE,KAAAJ,EAAA1L,GAAA,cAGAgI,KAAA,EAIA,QAAA1B,GAAAyF,GACA,GACAC,GADAC,EAAAF,EAAAG,uBAAA,OAGA,IAAAD,EAAAhM,OAAA,EACA,IAAA,GAAAD,GAAA,EAAAA,EAAAiM,EAAAhM,SAAAD,EAEAgM,EAAAC,EAAAjM,GAAAgB,WAEAgL,EAAAvL,QAAA,SAAAC,GACA,KAAA0D,EAAA0E,MAAAM,SAAA,KAAAlF,EAAA4E,MAAAM,UACAxI,EAAA+D,EAAA7D,EAAAJ,EAAAK,OAAAC,WAAAmL,aACAjL,EAAAsD,EAAA,MAOA,QAAA0B,GAAAnC,EAAA0B,GAEA,GAAA2G,GAAA,MAAA3G,EAAA,IAAAA,CAEA,IAAA2G,IAAArI,GAAA,CAGA,IAAA,GAFAsI,GAAA,GAEArM,EAAA,EAAAA,EAAA+D,EAAAqI,GAAAnM,SAAAD,EACAqM,GAAAtI,EAAAqI,GAAApM,EAGAyD,GAAA4C,UAAAgG,MAGA5I,GAAA4C,UAAA,GAIA,QAAAzF,GAAAgK,EAAA0B,GACA1B,EAAA2B,UACA3B,EAAA2B,UAAAD,EAEA1B,EAAA4B,YAAAF,EAIA,QAAA/F,GAAA3G,EAAAmE,GAIA,IAAA,GAFA+D,GAAAlI,EAAAG,qBAAA,OAEAC,EAAA,EAAAA,EAAA8H,EAAA7H,SAAAD,EACA8H,EAAA9H,GAAAS,QAAA,WACA,MAAAK,EAAAO,MAEA,KAAA+C,EAAA0E,MAAAM,SAAA,KAAA5E,EAAAsE,MAAAM,SAAA,KAAAxE,EAAAkE,MAAAM,SAAAlI,EAAAgD,EAAA,IACA,OAAApD,EAAAO,MACAD,EAAA,2BAAA,cAAA,EAAA,cACA,MAAAN,EAAAO,MAEA,KAAA+C,EAAA0E,MAAAM,SAAA,KAAA5E,EAAAsE,MAAAM,SAAA,KAAAlF,EAAA4E,MAAAM,SACAhI,EAAA,wBAAA,WAEA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,SAEA,OAAAF,KAAAG,aACAC,IACA,OAAAJ,KAAAG,aAEAE,EAAA,KAIAqD,GAAAsB,UAAAhF,KAAAG,aAEAN,EAAA0D,EAAA,QAGA,EAAA,cAGA,gBAAAvD,KAAAoL,GAEA3I,EAAAlE,EAAAkB,EAAAO,MAAA0C,GAEA,yBAAA1C,KAAAjB,aAAA,UAEA,KAAA8D,EAAA4E,MAAAM,SAAA,KAAA5E,EAAAsE,MAAAM,SAAA,KAAAxE,EAAAkE,MAAAM,SAEAhI,EAAA,wBAAA,WAEA,IAAAC,KAAAC,YAAA,MAAAD,KAAAE,SAGA,OAAAF,KAAAG,cAAAC,IAEA,KAAAJ,KAAAG,cAEA+C,EAAAuE,MAAAM,QAAA,OAEAsD,GAAA5D,MAAAM,QAAA,QAEAhF,EAAAmE,aAAAmE,GAAApI,KAIAoI,GAAA5D,MAAAM,QAAA,OAEA7E,EAAAuE,MAAAM,QAAA,QAEAjF,EAAAkC,UAAAhF,KAAAG,cAIAN,EAAAkD,EAAA,OAEA,EAAA,eAwBA,QAAAtD,GAAA8J,GACA,MAAAA,GAAA2B,UACA3B,EAAA2B,UAEA3B,EAAA4B,YAIA,QAAA9E,GAAA9H,EAAA0H,GACA,GAAAQ,GAAAlI,EAAAG,qBAAA,MAEA,OAAAuH,IAAAA,EAAA,IAIA,KAAA,GAFAqF,GAEA3M,EAAA,EAAAA,EAAA8H,EAAA7H,SAAAD,EACA,GAAAc,EAAAgH,EAAA9H,MAAAsH,EAAA,CACAqF,EAAA7E,EAAA9H,EACA,OAIA,MAAA2M,KAAApN,GAAA,EAAAoN,EAGA,QAAAzE,GAAArE,GAMA,IAAA,GAFA4B,GAHAqC,EAAAjE,EAAA9D,qBAAA,OAEA6M,EAAA,GAGA5M,EAAA,EAAAA,EAAA8H,EAAA7H,SAAAD,EACAyF,EAAA3E,EAAAgH,EAAA9H,IAEA,MAAAyF,GAAA,MAAAA,GAAA,MAAAA,GAAA,OAAAA,IAEAmH,GAAAnH,EAAA,IAOA,OAAA,KAAAmH,EAAA3L,MAAA,EAAA,IAAA,KA9qCA,GAUAwC,GACAJ,EAIAK,EACAC,EACAC,EACAC,EACAP,EAGAY,EACAF,EACAC,EAGAG,EACAC,EACAC,EACAC,EACAJ,EAGAK,EACAC,EACAC,EACAC,EAGAC,EACAC,EACAC,EACAE,GACAD,GAGA8B,GACAjF,GACAmF,GACAC,GACAC,GAGA9F,GACAgG,GACAtG,GACAuG,GAzDAhE,MAGAmC,IACA5B,UAAA,YACA/B,OAAA,yCACAgK,YAAA,oBAMApF,GAAA,EACAwB,IAAA,EACAjE,MAkDA2I,GAAApN,EAAA8I,cAAA,KASAhG,IAAA,EAAA,KAAA,MAKAD,IAAA,KAAA,KAGAvB,GAAA8L,GAAAtJ,GAAA,KAimCA,aAAA9D,EAAAgC,WACA5B,KAGAJ,EAAAuN,iBAAA,mBAAAnN,GAAA,GAGAL,EAAAwN,iBAAA,OAAAnN,GAAA,KAGAL,OAAAC","file":"build.min.js","sourcesContent":["(function(window, document, undefined) {\r\n\r\n\r\n\r\n\r\n    /* The language to be used, server-default: english.\r\n     * \r\n     * Available languages:\r\n     * - English (denote by the 'en' string).\r\n     * - Hebrew (denote by the 'he' string).\r\n     * */\r\n    var langReference = {},\r\n\r\n    // Regex patterns object.\r\n        regExpPatterns = {\r\n            usMessage : /^[\\s\\S]+$/,\r\n            usNick : /^[a-zא-ת\\d]{2,8}(\\s[a-zא-ת\\d]{1,8})?$/i,\r\n            idExtractor : /data\\-id=\"(\\d+)\"/\r\n        },\r\n\r\n    // Chat variables.\r\n        messagesContainer,\r\n        chatForm,\r\n        ajaxCounter = 0,\r\n        scrollTopFlag = false,\r\n        messagesInRooms = [],\r\n        communicationSection,\r\n        usMessage,\r\n        usersTable,\r\n        roomsList,\r\n        errorParagraph,\r\n\r\n    // New Rooms variables.\r\n        newRoomDiv,\r\n        cancelRoomDiv,\r\n        approveRoomDiv,\r\n\r\n    // New invitation variables.\r\n        newInvitationDiv,\r\n        cancelInvitationDiv,\r\n        approveInvitationDiv,\r\n        invitationForm,\r\n        userToInvite,\r\n\r\n    // User kick variables.\r\n        newKickDiv,\r\n        cancelKickDiv,\r\n        approveKickDiv,\r\n        kickMe,\r\n\r\n    // Room deletion variables.\r\n        newRoomDeletionDiv,\r\n        cancelRoomDeletionDiv,\r\n        approveRoomDeletionDiv,\r\n        roomDeletionForm,\r\n        deleteThisRoom,\r\n\r\n    // Registration form variables.\r\n        registrationForm,\r\n        usNick,\r\n        newCodeButton,\r\n        usCode,\r\n        codeImg,\r\n\r\n    // User deletion variables.\r\n        newUserDeletionDiv,\r\n        cancelUserDeletionDiv,\r\n        deleteMe,\r\n        approveUserDeletionDiv,\r\n\r\n    /* I choose P element even if its a block level element because inside\r\n     * the newInvitationDiv, newRoomDeletionDiv I already have 2 spans so for the css\r\n     * if I only want to style the middle span is a bit\r\n     * inconvenient and that is why I choose p.\r\n     * */\r\n        noUsers = document.createElement('p'),\r\n\r\n\r\n    // spamDetector variables.\r\n\r\n    /* Key 0: Identify the counter.\r\n     * Key 1: Identify the current case.\r\n     * Key 2: Identify the last case.\r\n     * */\r\n        spamDetectorCounter = [0, null, null],\r\n\r\n    /* Key 0: New time.\r\n     * Key 1: Old time.\r\n     * */\r\n        spamDetectorDate = [null, null];\r\n\r\n    // I preset the value of noUsers paragraph.\r\n    setText(noUsers, langReference['W_0']);\r\n\r\n    /************************************* Removal functions ***************************************** (2)\r\n     *\r\n     * removeLoadListeners - \"DOMContentLoaded\" and \"load\" are 2 different events I don't want them both\r\n     *                       activate initChat so the first one to be activated should deactivate the second.\r\n     *\r\n     * removeElementsIdAndSecondClass - removes elements within a given container, it uses tagName to select elements\r\n     *                                  from inside the container and removes the id and second class if set.\r\n     * */\r\n\r\n    function removeLoadListeners() {\r\n        document.removeEventListener(\"DOMContentLoaded\", initChat, false);\r\n        window.removeEventListener(\"load\", initChat, false);\r\n    }\r\n\r\n    function removeElementsIdAndSecondClass(container, tagName) {\r\n        var elements = container.getElementsByTagName(tagName);\r\n\r\n        for (var i = elements.length - 1; i >= 0; --i) {\r\n            elements[i].removeAttribute('id');\r\n            elements[i].setAttribute('class', elements[i].getAttribute('class').split(' ')[0]);\r\n        }\r\n    }\r\n\r\n    /********************************************* Helper functions ************************************************* (14)\r\n     *\r\n     * spamDetector - Disable spam, uses the delay between messages to determine when there is spam.\r\n     *\r\n     * initChat - The core function used to activate the chat.\r\n     *\r\n     * checkAndSetValidRoom - Sends the room id to the server, if the room id is ok the server side will set the new room id\r\n     *                        to be the current room, it also uses setCurrentRoom to set the current room on the client side.\r\n     *\r\n     * setCurrentRoom - The actual function used to set the current room on the client side.\r\n     *\r\n     * sortRemoveAddRooms - Sort / Remove / Add rooms.\r\n     *\r\n     * invitationApproveCancel - Invitations handler.\r\n     *\r\n     * deleteRoomApproveCancel - Room deletion handler.\r\n     *\r\n     * kickApproveCancel - User kicking handler.\r\n     *\r\n     * roomApproveCancel - New room creation handler.\r\n     *\r\n     * deleteUserApproveCancel - User deletion handler.\r\n     *\r\n     * initAjax - Used for every ajax call in this chat.\r\n     *\r\n     * minusDisplayHandler - Handel the display of the minus room, the display is depended whether the user own\r\n     *                       any room he can delete.\r\n     *\r\n     * plusDisplayHandler - Handel the display of the plus room depending on the user rank.\r\n     *\r\n     * reloadPage - Reloads the page.\r\n     *\r\n     * */\r\n\r\n    function selectUserHandler(container) {\r\n\r\n        var users = container.getElementsByTagName('li');\r\n\r\n        for(var i = 0; i < users.length; ++i) {\r\n\r\n            users[i].lastChild.onclick = function(evt) {\r\n                /* The span elements are inside the li elements the problem is that the event will bubble to the li element\r\n                 * as you can see below I also have event handler for li click, the problem is that if I click the span\r\n                 * the li handler will also be activated due to the bubble and that is why I have to use evt.stopPropagation();\r\n                 * */\r\n                evt.stopPropagation();\r\n\r\n                // Slice is well explained below.\r\n                setText(deleteMe, getText(evt.target.parentNode).slice(0, -1));\r\n                show(newUserDeletionDiv, 50);\r\n            };\r\n\r\n            users[i].onclick = function(evt) {\r\n                initAjax('php/ajax/setCurrentUser.php', function() {\r\n\r\n                        if(this.readyState === 4 && this.status === 200) {\r\n                            if(this.responseText === '1') {\r\n                                reloadPage();\r\n                            }else{\r\n                                setError(this.responseText);\r\n                            }\r\n                        }\r\n\r\n                    }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n                    /* The reason for slicing the last character is because the last character is the x character\r\n                     * inside the span element that inside the li element, so for example for the name 'aviel' we get\r\n                     * 'avielx'.\r\n                     * */\r\n                    {'usNick' : getText(evt.target).slice(0, -1)});\r\n            };\r\n        }\r\n    }\r\n\r\n    function spamDetector() {\r\n\r\n        var spamDetected = false;\r\n\r\n        /* The / operator over the Date object will make the object return the milliseconds since midnight Jan 1, 1970.\r\n         * Than i divide by 1000 to get seconds, and finally i use Math.floor to floor to cut milliseconds fractions.\r\n         * */\r\n        var currentTime = Math.floor(new Date() / 1000);\r\n\r\n        if(spamDetectorDate[0] === null) { // There is no need to check key 1 for null.\r\n            spamDetectorDate[0] = currentTime;\r\n            spamDetectorDate[1] = currentTime;\r\n        }else{\r\n            spamDetectorDate[1] = spamDetectorDate[0];\r\n            spamDetectorDate[0] = currentTime;\r\n        }\r\n\r\n        if((spamDetectorDate[0] - 2) <= spamDetectorDate[1]) {\r\n            spamDetectorCounter[1] = 5; // The value 5 came from the 5 messages sequence I allow.\r\n        }else if((spamDetectorDate[0] - 3) === spamDetectorDate[1]) {\r\n            spamDetectorCounter[1] = 10; // The value 10 came from the 5 messages sequence I allow.\r\n        }else if((spamDetectorDate[0] - 4) === spamDetectorDate[1]) {\r\n            spamDetectorCounter[1] = 15; // The value 15 came from the 5 messages sequence I allow.\r\n        }else if((spamDetectorDate[0] - 5) === spamDetectorDate[1]) {\r\n            spamDetectorCounter[1] = 20; // The value 20 came from the 5 messages sequence I allow.\r\n        }else{\r\n            spamDetectorCounter[0] = 1;\r\n            return false; // There is no need to continue if there is no spam.\r\n        }\r\n\r\n        switch(spamDetectorCounter[1]) {\r\n            case 5:\r\n                spamDetectorCounter[0] >= 5 ? spamDetected = true :\r\n                    (spamDetectorCounter[2] === 5 ? ++spamDetectorCounter[0] : spamDetectorCounter[2] = 5);\r\n                break;\r\n            case 10:\r\n                spamDetectorCounter[0] >= 10 ? spamDetected = true :\r\n                    (spamDetectorCounter[2] === 10 ? ++spamDetectorCounter[0] : spamDetectorCounter[2] = 10);\r\n                break;\r\n            case 15:\r\n                spamDetectorCounter[0] >= 15 ? spamDetected = true :\r\n                    (spamDetectorCounter[2] === 15 ? ++spamDetectorCounter[0] : spamDetectorCounter[2] = 15);\r\n                break;\r\n            case 20:\r\n                spamDetectorCounter[0] >= 20 ? spamDetected = true :\r\n                    (spamDetectorCounter[2] === 20 ? ++spamDetectorCounter[0] : spamDetectorCounter[2] = 20);\r\n                break;\r\n        }\r\n\r\n        return spamDetected;\r\n    }\r\n\r\n    function initChat() {\r\n\r\n\r\n        var enLang = {\r\n\r\n            'W_0' : 'No unsolicited connected users',\r\n            'W_1' : 'Spam detected, please try in a few seconds',\r\n            'W_2' : 'You can\\'t create more rooms, please delete to recreate another one',\r\n            'W_3' : 'Cannot delete active user, please retry in a minute',\r\n            'W_4' : 'The chosen nickname doesn\\'t exists or or deleted',\r\n            'W_5' : 'Unknown error code',\r\n            'W_6' : 'Server side has occurred, please try again later',\r\n            'W_7' : 'The system detected an invalid operation',\r\n            'W_8' : 'Error code',\r\n            'W_9' : 'Error closing',\r\n            'W_10' : 'The server failed to Identify your request'\r\n\r\n        };\r\n\r\n        var heLang = {\r\n\r\n            'W_0' : 'לא נמצאו משתמשים מחוברים שלא הוזמנו',\r\n            'W_1' : 'המערכת זיהתה ספאם אנא נסה/י שנית בעוד מספר שניות',\r\n            'W_2' : 'הגעת למכסת החדרים המותרת לכל משתמש, תוכל/י למחוק חדרים וליצור חדשים',\r\n            'W_3' : 'אין באפשרות המערכת למחוק משתמש פעיל, אנא עצור את פעילות המשתמש ונסה/י שנית כעבור כדקה',\r\n            'W_4' : 'הכינוי הנבחר אינו קיים או נמחק',\r\n            'W_5' : 'קוד שגיאה לא מוכר',\r\n            'W_6' : 'שגיאת שרת התרחשה, אנא נסה\\י במועד מאוחר יותר',\r\n            'W_7' : 'המערכת זיהתה פעולה לא חוקית',\r\n            'W_8' : 'קוד שגיאה',\r\n            'W_9' : 'סגירת שגיאה',\r\n            'W_10' : 'השרת נכשל בזיהוי בקשתך'\r\n        };\r\n\r\n        switch(document.getElementById('lang').value) {\r\n\r\n            case 'he':\r\n                langReference = heLang;\r\n            break;\r\n\r\n            default:\r\n                langReference = enLang;\r\n\r\n        }\r\n\r\n        // So initChat won't be call by \"load\" event and \"DOMContentLoaded\" event.\r\n        removeLoadListeners();\r\n\r\n        // So I can know if I should activate script for chat or for chat registration.\r\n        chatForm = document.getElementById('chatForm');\r\n        errorParagraph = document.getElementById('errorParagraph');\r\n\r\n        // I don't need to predefine this variable because there will be no other use of this variable than the following onclick event.\r\n        var closeErrorParagraph = document.getElementById('closeErrorParagraph');\r\n\r\n        // The if statement is for cases where user wants to register and there is no error presented yet.\r\n        if(closeErrorParagraph !== null) {\r\n            closeErrorParagraph.onclick = function() {\r\n                hide(errorParagraph, 50);\r\n            };\r\n        }\r\n\r\n        if(chatForm !== null) {\r\n\r\n            messagesContainer = document.getElementById('messagesContainer');\r\n            communicationSection = document.getElementById('communicationSection');\r\n            usMessage = document.getElementById('message');\r\n            usersTable = document.getElementById('usersTable');\r\n            roomsList = document.getElementById('roomsList');\r\n\r\n            /* When a user first come into the chat the server will set the current room automatically to 0,\r\n             * if the user entered another room the server will set to be that room, if the user refresh the page\r\n             * server is still remember the last room the user entered and not 0, and that is why I need to set the current\r\n             * room to 1 per refresh.\r\n             * */\r\n            checkAndSetValidRoom(roomsList, \"*\", messagesInRooms);\r\n\r\n            cancelRoomDiv = document.getElementById('cancelRoomDiv');\r\n            approveRoomDiv = document.getElementById('approveRoomDiv');\r\n            newRoomDiv = document.getElementById('newRoomDiv');\r\n\r\n            userToInvite = document.getElementById('userToInvite');\r\n            newInvitationDiv = document.getElementById('newInvitationDiv');\r\n            cancelInvitationDiv = document.getElementById('cancelInvitationDiv');\r\n            approveInvitationDiv = document.getElementById('approveInvitationDiv');\r\n            invitationForm = document.getElementById('invitationForm');\r\n\r\n            newKickDiv = document.getElementById('newKickDiv');\r\n            cancelKickDiv = document.getElementById('cancelKickDiv');\r\n            approveKickDiv = document.getElementById('approveKickDiv');\r\n            kickMe = document.getElementById('kickMe');\r\n\r\n            newRoomDeletionDiv = document.getElementById('newRoomDeletionDiv');\r\n            cancelRoomDeletionDiv = document.getElementById('cancelRoomDeletionDiv');\r\n            approveRoomDeletionDiv = document.getElementById('approveRoomDeletionDiv');\r\n            deleteThisRoom = document.getElementById('deleteThisRoom');\r\n            roomDeletionForm = document.getElementById('roomDeletionForm');\r\n\r\n            approveRoomDeletionDiv.onclick = function() {\r\n                deleteRoomApproveCancel(true, newRoomDeletionDiv);\r\n            };\r\n\r\n            cancelRoomDeletionDiv.onclick = function() {\r\n                deleteRoomApproveCancel(false, newRoomDeletionDiv);\r\n            };\r\n\r\n            approveKickDiv.onclick = function() {\r\n                kickApproveCancel(true, newKickDiv);\r\n            };\r\n\r\n            cancelKickDiv.onclick = function() {\r\n                kickApproveCancel(false, newKickDiv);\r\n            };\r\n\r\n            approveRoomDiv.onclick = function() {\r\n                roomApproveCancel(true, newRoomDiv);\r\n            };\r\n\r\n            cancelRoomDiv.onclick = function() {\r\n                roomApproveCancel(false, newRoomDiv);\r\n            };\r\n\r\n            approveInvitationDiv.onclick = function() {\r\n                invitationApproveCancel(true, newInvitationDiv);\r\n            };\r\n\r\n            cancelInvitationDiv.onclick = function() {\r\n                invitationApproveCancel(false, newInvitationDiv);\r\n            };\r\n\r\n            usMessage.onkeyup = function() {\r\n                colors(usMessage, regExpPatterns.usMessage);\r\n            };\r\n\r\n\r\n            /* This self executing function is the core functionality of this chat,\r\n             * its update everything, users, messages and rooms.\r\n             * */\r\n\r\n\r\n             setInterval(function() {\r\n\r\n                initAjax('php/ajax/getData.php', function() {\r\n\r\n                        if(this.readyState === 4 && this.status === 200) {\r\n\r\n                            if(this.responseText === '-1') {\r\n                                reloadPage();\r\n                            }else{\r\n                                var splitResult = this.responseText.split('SEP');\r\n\r\n                                var messages = splitResult[0];\r\n                                var users = splitResult[1];\r\n                                var newRooms = splitResult[2];\r\n                                var removedRooms = splitResult[3];\r\n                                var rank = parseInt(splitResult[4]);\r\n\r\n                                var currentRoom = document.getElementById('currentRoom');\r\n                                var currentRoomInnerText;\r\n\r\n                                /* As you can see the problem is that currentRoom may be not be set yet because the ajax response\r\n                                 * from checkAndSetValidRoom above is delayed, what will happen is that I will not have element\r\n                                 * with currentRoom id, if there is no element than there is no innerText, so until the server\r\n                                 * response I set it to \"*\", the value should be anyway \"*\", so there is no problem with sending \"*\".\r\n                                 * */\r\n                                if(currentRoom !== null) {\r\n                                    currentRoomInnerText = getText(currentRoom);\r\n                                }else{\r\n                                    currentRoomInnerText = '*';\r\n                                }\r\n\r\n                                insertMessagesToRooms(messages, messagesInRooms);\r\n                                appendMessages(messagesInRooms, currentRoomInnerText);\r\n                                plusDisplayHandler(roomsList, rank);\r\n                                sortRemoveAddRooms(roomsList, newRooms, removedRooms, currentRoomInnerText);\r\n                                usersTable.innerHTML = users;\r\n                                addRowsHandler(usersTable);\r\n                                addRoomsHandler(roomsList, messagesInRooms);\r\n                            }\r\n                        }\r\n\r\n                    }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n                    {'ajaxCounter' : ajaxCounter});\r\n                ++ajaxCounter;\r\n\r\n             }, 2000);\r\n\r\n            chatForm.onsubmit = function() {\r\n                if(!spamDetector()) {\r\n                    if(regExpPatterns.usMessage.test(usMessage.value) && usMessage.value.trim().length > 0) {\r\n                        initAjax('php/ajax/addMessage.php', function() {\r\n\r\n                                if(this.readyState === 4 && this.status === 200) {\r\n\r\n                                    if(this.responseText !== '1') setError(7);\r\n\r\n                                    usMessage.value = '';\r\n                                    colors(usMessage, regExpPatterns.usMessage);\r\n                                }\r\n\r\n                            }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n                            {'usMessage' : usMessage.value});\r\n                    }else{\r\n                        /* The reason for calling colors() before the focus() is because if I have send a message than the value will be ''\r\n                         * but the className will remain green from the previous message I have send only after keyup event the className\r\n                         * will be updated so here I call colors without having to wait for the user to trigger keyup event.\r\n                         * */\r\n                        colors(usMessage, regExpPatterns.usMessage);\r\n                        usMessage.focus();\r\n                    }\r\n                }else{\r\n                    setError(2);\r\n                }\r\n\r\n                return false;\r\n            };\r\n        }else{\r\n\r\n            registrationForm = document.getElementById('registrationForm');\r\n            var mainUserSelection = document.getElementById('mainUserSelection');\r\n\r\n            if(registrationForm !== null) {\r\n                registrationForm = document.getElementById('registrationForm');\r\n                usNick = document.getElementById('usNick');\r\n                newCodeButton = document.getElementById('newCodeButton');\r\n                usCode = document.getElementById('usCode');\r\n                codeImg = document.getElementById('codeImg');\r\n\r\n               /* The cM parameter is used so some browser, as I tested firefox, may decide not to change the src captcha.php again.\r\n                * They will not reset src attribute to its previous value, so I have to add parameter.\r\n                *\r\n                * cM stands for change me.\r\n                * */\r\n\r\n\r\n                newCodeButton.onclick = function() {\r\n                    codeImg.src = \"php/captcha.php?cM=\" + (new Date() / 1000);\r\n                };\r\n\r\n                usNick.onkeyup = function() {\r\n                    colors(usNick, regExpPatterns.usNick);\r\n                };\r\n\r\n                registrationForm.onsubmit = function() {\r\n\r\n                    if(!regExpPatterns.usNick.test(usNick.value)) {\r\n\r\n                        /* The reason for calling colors() before the focus() is because if I have send a message than the value will be ''\r\n                         * but the className will remain green from the previous message I have send only after keyup event the className\r\n                         * will be updated so here I call colors without having to wait for the user to trigger keyup event.\r\n                         * */\r\n                        colors(usNick, regExpPatterns.usNick);\r\n                        usNick.focus();\r\n                        usCode.src = \"php/captcha.php?cM=\" + (new Date() / 1000); // The cM parameter is explained above.\r\n                        // I only want to return false if there is a problem, otherwise reload the page.\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                };\r\n            }\r\n\r\n            if(mainUserSelection !== null) {\r\n\r\n                newUserDeletionDiv = document.getElementById('newUserDeletionDiv');\r\n                cancelUserDeletionDiv = document.getElementById('cancelUserDeletionDiv');\r\n                deleteMe = document.getElementById('deleteMe');\r\n                approveUserDeletionDiv = document.getElementById('approveUserDeletionDiv');\r\n\r\n                approveUserDeletionDiv.onclick = function() {\r\n                    deleteUserApproveCancel(true, newUserDeletionDiv);\r\n                };\r\n\r\n                cancelUserDeletionDiv.onclick = function() {\r\n                    deleteUserApproveCancel(false, newUserDeletionDiv);\r\n                };\r\n\r\n                selectUserHandler(mainUserSelection);\r\n            }\r\n        }\r\n    }\r\n\r\n    function checkAndSetValidRoom(container, roomId, messagesInRooms) {\r\n        initAjax('php/ajax/validRoom.php', function() {\r\n                if(this.readyState === 4 && this.status === 200) {\r\n                    if(this.responseText !== '0')\r\n                        setCurrentRoom(container, this.responseText.split('|')[0], this.responseText.split('|')[1], messagesInRooms);\r\n                }\r\n            }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n            {'roomId' : roomId});\r\n    }\r\n\r\n    function setCurrentRoom(container, roomContext, roomId, messagesInRooms) {\r\n\r\n        var newRoom = getRoomByInnerText(container, roomId);\r\n\r\n        if(newRoom) {\r\n            removeElementsIdAndSecondClass(container, 'div');\r\n            newRoom.setAttribute('id', 'currentRoom');\r\n            appendMessages(messagesInRooms, roomId);\r\n            if(roomContext === 'own') newRoom.setAttribute('class', newRoom.getAttribute('class') + ' withInviteOption');\r\n        }else{\r\n            setError(0);\r\n        }\r\n    }\r\n\r\n    function sortRemoveAddRooms(roomsList, newRooms, removedRooms, currentRoomInnerText) {\r\n        var allDivs = roomsList.getElementsByTagName('div');\r\n        var firstInvitedDiv;\r\n        var userSwitchDiv;\r\n        var minusDivIndex;\r\n\r\n        for(var k = 0; k < allDivs.length; ++k) {\r\n            if(allDivs[k].getAttribute('class') === 'invited') {\r\n                /* Identify the firstInvitedDiv so new invited rooms can appear at the top of the invited rooms stack.\r\n                 * If not found it will be appended to the end of all rooms stack.\r\n                 * */\r\n                firstInvitedDiv = allDivs[k];\r\n            }else if(getText(allDivs[k]) === '↑↓') {\r\n                // Identify the roomDeletionDiv so new own rooms can appear at the top of the own rooms stack.\r\n                userSwitchDiv = allDivs[k];\r\n            }else if(getText(allDivs[k]) === '-') {\r\n                // This identity of minus div index is only to be send to minusDisplayHandler.\r\n                minusDivIndex = k;\r\n            }\r\n        }\r\n\r\n        if(newRooms !== '') {\r\n\r\n            scrollTopFlag = true;\r\n\r\n            var alreadyExistPattern = getAlreadyExistPattern(roomsList);\r\n\r\n            /* I can't use separator from the server like the messages '</div>'.\r\n             * the reason is because insertBefore, getText, getAttribute they all require dom node,\r\n             * and converting every array value(contain html) into node\r\n             * will wast more resources than the following 3 lines.\r\n             * */\r\n            var tmpDiv = document.createElement('div');\r\n            tmpDiv.innerHTML = newRooms;\r\n\r\n            var allNewRooms = tmpDiv.getElementsByTagName('div');\r\n\r\n            for(var i = 0; i < allNewRooms.length; ++i) {\r\n\r\n                if((new RegExp(alreadyExistPattern)).test(getText(allNewRooms[i]))) continue;\r\n\r\n                if(allNewRooms[i].getAttribute('class') === 'invited') {\r\n                    if(firstInvitedDiv === undefined) {\r\n                        roomsList.insertBefore(allNewRooms[i].cloneNode(true), null);\r\n                    }else{\r\n                        firstInvitedDiv.parentNode.insertBefore(allNewRooms[i].cloneNode(true), firstInvitedDiv);\r\n                    }\r\n                }else if(allNewRooms[i].getAttribute('class') === 'own') {\r\n                    userSwitchDiv.parentNode.insertBefore(allNewRooms[i].cloneNode(true), userSwitchDiv.nextSibling);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(removedRooms !== '') {\r\n            scrollTopFlag = true;\r\n\r\n            /* removedRooms is returned from the server in the form of a regex pattern,\r\n             * this pattern contain all the rooms ids that should be removed.\r\n             * */\r\n            var removedRoomsPattern = new RegExp(removedRooms);\r\n\r\n            for (var j = allDivs.length - 1; j >= 0; --j) {\r\n                if(removedRoomsPattern.test(getText(allDivs[j]))) {\r\n                    /* As you can see messagesInRooms is not passed as a argument, this decision is made because this function\r\n                     * already contain many parameters.\r\n                     * */\r\n                    if(getText(allDivs[j]) === currentRoomInnerText) {\r\n                        // This function used to set the current room at the server.\r\n                        checkAndSetValidRoom(roomsList, \"*\", messagesInRooms);\r\n                    }\r\n\r\n                    /* I need to cleanup the object in case I truncate all the rooms from the database so for example\r\n                     * messagesInRooms will contain messages for room with 1, after I truncate the room will be removed\r\n                     * but the messages for room id 1 will remain in the messagesInRooms object, so the problem is that\r\n                     * the increment counter will reset and if the user will create new room the id will be 1 and the object\r\n                     * with the old id 1 room messages will load the messages to the new id 1 room(after the truncate).\r\n                     * */\r\n                    messagesInRooms.splice(getText(allDivs[j]), 1);\r\n                    roomsList.removeChild(allDivs[j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        messagesContainer.style.height = (roomsList.clientHeight > 500 ? roomsList.clientHeight : 500) + 'px';\r\n        if(scrollTopFlag) messagesContainer.scrollTop = messagesContainer.clientHeight;\r\n        minusDisplayHandler(roomsList, minusDivIndex);\r\n    }\r\n\r\n    function invitationApproveCancel(approveCancel, newInvitationDiv) {\r\n\r\n        if(approveCancel && invitationForm.style.display === 'block') {\r\n\r\n            initAjax('php/ajax/addInvitation.php', function() {\r\n\r\n                    if(this.readyState === 4 && this.status === 200)\r\n                        if(this.responseText !== '1') setError(this.responseText);\r\n\r\n                }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n                {'userToInvite' : userToInvite.value});\r\n\r\n            /* The reason for the above check is only to allow the ajax request to be send where the form is displayed,\r\n             * the form should not be displayed in cases where there is no more users that have not yet invited and the user\r\n             * should also be active, instead a message explaining the user that there is no more users to invite, if I will not\r\n             * include the above check(invitationForm.style.display === 'block') even when the message will be shown and the\r\n             * user click approve, the request to the server will be send with userToInvite.value, the problem is that userToInvite.value\r\n             * may be the previous selected user from a different room where it was available to invite to users, or if the options\r\n             * was not populated before the value will be \"\", the server may result in '0' for the first case(previous selected user)\r\n             * or '0' in case of ('') is sent.\r\n             * */\r\n        }\r\n\r\n        // I hide the div no matter if approve or cancel was clicked.\r\n        hide(newInvitationDiv, 50);\r\n    }\r\n\r\n    function deleteRoomApproveCancel(approveCancel, newRoomDeletionDiv) {\r\n        if(approveCancel) {\r\n            initAjax('php/ajax/deleteRoom.php', function() {\r\n                    if(this.readyState === 4 && this.status === 200)\r\n                        if(this.responseText !== '1') setError(this.responseText);\r\n\r\n                }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n                {'deleteThisRoom' : deleteThisRoom.value});\r\n        }\r\n\r\n        // I hide the div no matter if approve or cancel was clicked.\r\n        hide(newRoomDeletionDiv, 50);\r\n    }\r\n\r\n\r\n    function kickApproveCancel(approveCancel, newKickDiv) {\r\n        if(approveCancel) {\r\n            initAjax('php/ajax/addKick.php', function() {\r\n                    if(this.readyState === 4 && this.status === 200)\r\n                        if(this.responseText !== '1') setError(this.responseText);\r\n\r\n                }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n                {'kickMe' : getText(kickMe)});\r\n        }\r\n\r\n        // I hide the div no matter if approve or cancel was clicked.\r\n        hide(newKickDiv, 50);\r\n    }\r\n\r\n    function roomApproveCancel(approveCancel, newRoomDiv) {\r\n        if(approveCancel) {\r\n            initAjax('php/ajax/addNewRoom.php', function() {\r\n\r\n                if(this.readyState === 4 && this.status === 200)\r\n                    if(this.responseText !== '1') setError(this.responseText);\r\n\r\n            }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'}, {});\r\n        }\r\n\r\n        // I hide the div no matter if approve or cancel was clicked.\r\n        hide(newRoomDiv, 50);\r\n    }\r\n\r\n    function deleteUserApproveCancel(approveCancel, newUserDeletionDiv) {\r\n        if(approveCancel) {\r\n            initAjax('php/ajax/deleteUser.php', function() {\r\n\r\n                    if(this.readyState === 4 && this.status === 200) {\r\n\r\n                        if(this.responseText === '1') {\r\n                            reloadPage();\r\n                        }else{\r\n                            setError(this.responseText);\r\n                        }\r\n                    }\r\n\r\n                }, true, 'POST', {'Content-type' : 'application/x-www-form-urlencoded; charset=UTF-8'},\r\n                {'deleteMe' : getText(deleteMe)});\r\n        }\r\n\r\n        // I hide the div no matter if approve or cancel was clicked.\r\n        hide(newUserDeletionDiv, 50);\r\n    }\r\n\r\n    function initAjax(url, changeFunction, syn, method, headers, paramsObject) {\r\n        var xhr;\r\n\r\n        if (window.XMLHttpRequest) {\r\n            xhr = new XMLHttpRequest(); // for IE7+, Firefox, Chrome, Opera, Safari\r\n        } else {\r\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\"); // for IE6, IE5\r\n        }\r\n\r\n        xhr.onreadystatechange = changeFunction; // This line take place on true and false\r\n\r\n        xhr.open(method, url, syn);\r\n\r\n        for (var headerKey in headers) {\r\n            if(headers.hasOwnProperty(headerKey))\r\n                xhr.setRequestHeader(headerKey, headers[headerKey]);\r\n        }\r\n\r\n        var paramsString = '';\r\n\r\n        for (var paramKey in paramsObject) {\r\n            if(paramsObject.hasOwnProperty(paramKey))\r\n                paramsString += (paramKey + '=' + paramsObject[paramKey] + '&');\r\n        }\r\n\r\n        paramsString = paramsString.slice(0, -1); // To remove the last '&'\r\n\r\n        xhr.send(paramsString);\r\n    }\r\n\r\n    function minusDisplayHandler(roomsList, minusDivIndex) {\r\n        var allDivs = roomsList.getElementsByTagName('div');\r\n\r\n        var display = 'none';\r\n\r\n        for(var i = 0; i < allDivs.length; ++i) {\r\n            // The first case is for any own room presented, the second case is if the owner is currently on this room.\r\n            if(allDivs[i].getAttribute('class') === 'own' || allDivs[i].getAttribute('class') === 'own withInviteOption') {\r\n                display = 'block';\r\n                break;\r\n            }\r\n        }\r\n\r\n        allDivs[minusDivIndex].style.display = display;\r\n    }\r\n\r\n    function plusDisplayHandler(roomsList, rank) {\r\n        var allDivs = roomsList.getElementsByTagName('div');\r\n        var plusDivIndex;\r\n\r\n        for(var i = 0; i < allDivs.length; ++i) {\r\n            if(getText(allDivs[i]) === '+') {\r\n                plusDivIndex = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        allDivs[plusDivIndex].style.display = (rank > 0 ? 'block' : 'none');\r\n    }\r\n\r\n\r\n    function reloadPage() {\r\n        // To bypass POST warning I must reload page with full URL.\r\n        window.location.href = window.location.protocol +'//'+ window.location.host + window.location.pathname;\r\n    }\r\n\r\n    /********************************************** Effects functions ************************************************ (3)\r\n     *\r\n     * show - same as fade in effect.\r\n     *\r\n     * hide - same as fade out effect.\r\n     *\r\n     * colors - Small colorful helper to allow the user know when the field is not ready to be send.\r\n     * */\r\n\r\n    function show(element, miliseconds) {\r\n        element.style.display = 'block';\r\n        var j = 0.1,\r\n            intrv = setInterval(function() {\r\n            // toString() is used just for better understanding the value inserted, style attribute accept strings.\r\n            element.style.opacity = j.toString();\r\n            if(j>1) clearInterval(intrv);\r\n            j+=0.1;\r\n        }, miliseconds);\r\n    }\r\n\r\n    function hide(element, miliseconds) {\r\n\r\n        /* This all savedHandler concept is because after the user click the create room or invite user, etc button the hide is activate\r\n         * the problem is that the hide take time to really hide the element(element.style.display = ''), so until then the user can create\r\n         * rooms or invite, etc again and again the same user or if he is really fast even another user or two, anyway what I did is to remove the\r\n         * handler from the start of the hiding and retrieve it after the element.style.display = '';\r\n         * */\r\n        var savedHandlers = [];\r\n\r\n        var currentApproveCancel = element.getElementsByTagName('span');\r\n\r\n        for(var i = 0; i < currentApproveCancel.length; ++i) {\r\n            savedHandlers[i] = currentApproveCancel[i].onclick;\r\n            currentApproveCancel[i].onclick = null;\r\n        }\r\n\r\n        var j = 0.9,\r\n            intrv = setInterval(function() {\r\n            // toString() is used just for better understanding the value inserted, style attribute accept strings.\r\n            element.style.opacity = j.toString();\r\n            if(j<0) {\r\n                element.style.display = '';\r\n\r\n                // After the effect is finished I want to return the handlers.\r\n                for(var i = 0; i < currentApproveCancel.length; ++i) {\r\n                    currentApproveCancel[i].onclick = savedHandlers[i];\r\n                }\r\n\r\n                clearInterval(intrv);\r\n            }\r\n            j-=0.1;\r\n\r\n        }, miliseconds);\r\n    }\r\n\r\n    function colors(field, pattern) {\r\n        if(field.value === '' || field.value.trim().length === 0) {\r\n            field.setAttribute('class', 'neutral');\r\n        }else if(pattern.test(field.value)) {\r\n            field.setAttribute('class', 'valid');\r\n        }else{\r\n            field.setAttribute('class', 'invalid');\r\n        }\r\n    }\r\n\r\n\r\n    /********************************* Add / Insert / append / setter / functions ************************************ (6)\r\n     *\r\n     *  setError - Display an error based on server/client error codes.\r\n     *\r\n     *  insertMessagesToRooms - Populate the messages array.\r\n     *\r\n     *  addRowsHandler - Add handlers for kicking users at users table.\r\n     *\r\n     *  appendMessages - This function used to populate the messagesContainer.\r\n     *\r\n     *  setText - Cross-browser innerText function.\r\n     *\r\n     *  addRoomsHandler - Every rooms update may result in new rooms and that is why this function will renew the\r\n     *                    handler every update whether or not a new room added or not.\r\n     * */\r\n\r\n    function setError(errorCode) {\r\n        console.log(errorCode);\r\n        /* For cases where I set errorText = false I state that the error is the result of illegal action made by the user.\r\n         * For cases where I set errorText = true I state that the error is the result server error.\r\n         * */\r\n\r\n        if(typeof errorCode === 'string') {\r\n\r\n            if(errorCode.length === 0) {\r\n                /* f the server validRequest() will fail to identify the client request, empty string\r\n                 * will be returned, hence for cases where empty string returned, for that kind of cases I will\r\n                 * set the errorCode to 19\r\n                 * */\r\n                errorCode = 19;\r\n            } else {\r\n                // parseInt is for cases where this.responseText is sent, not as the above case.\r\n                errorCode = parseInt(errorCode);\r\n            }\r\n\r\n\r\n        }\r\n\r\n        \r\n        var errorText;\r\n\r\n        switch (errorCode) {\r\n            /* You may say why the reload here, well there may be a second before getData will return -1, maybe some other php\r\n             * ajax file may return -1 before getData, in that case the reload will happen faster, if I won't return -1 from\r\n             * all the ajax files I may result the default case in this switch for a second before getData will reload the page.\r\n             * */\r\n            case -1:\r\n                reloadPage();\r\n                break;\r\n            case 0: // The room clicked was not found at the database.\r\n                errorText = false;\r\n                break;\r\n            case 1: // When user try to enter nonexistent room.\r\n                errorText = false;\r\n                break;\r\n            case 2:\r\n                errorText = langReference['W_1'];\r\n                break;\r\n            case 3: // Invitation of a nonexistent user, or the user was already invited, or it is you.\r\n                errorText = false;\r\n                break;\r\n            case 4: // Kicking yourself out of your own room is not legal\r\n                errorText = false;\r\n                break;\r\n            case 5: // Kicking nonexistent user.\r\n                errorText = false;\r\n                break;\r\n            case 6: // Kicking existent user but not invited to this room.\r\n                errorText = false;\r\n                break;\r\n            case 7: // Sending message failed due to server error.\r\n                errorText = true;\r\n                break;\r\n            case 8: // When user try to add room, getting the rank via the database was failed due to server error.\r\n                errorText = true;\r\n                break;\r\n            case 9: // Your rank do not allow you to add new rooms.\r\n                errorText = false;\r\n                break;\r\n            case 10:\r\n                errorText = langReference['W_2'];\r\n                break;\r\n            case 11: // Creating new room failed due to server error.\r\n                errorText = true;\r\n                break;\r\n            case 12: // When a user try to delete nonexistent room.\r\n                errorText = false;\r\n                break;\r\n            case 13: // Room deletion was failed due to server error.\r\n                errorText = true;\r\n                break;\r\n            case 14: // When user try to delete nonexistent user.\r\n                errorText = false;\r\n                break;\r\n            case 15:\r\n                errorText = langReference['W_3'];\r\n                break;\r\n            case 16: // User deletion failed due to server error.\r\n                errorText = true;\r\n                break;\r\n            case 17:\r\n            /* Most of the chances are that the user manipulate the DOM, but there may be a chance where\r\n             * the user was deleted from another computer on the same IP, and that is why I don't set errorText = false;.\r\n             * */\r\n                errorText = langReference['W_4'];\r\n                break;\r\n            case 18:\r\n            /* The idea is that the user shouldn't even see the '-' room div if he/she doesn't have any room/s he/she owns,\r\n             * in that kind of case the '-' room div style.display should be none, if a user using an inspector will change\r\n             * it display value to block than click it, the server will search and see that this user do not have its own\r\n             * rooms so there is nothing to delete, but in case there is no rooms to delete the '-' shouldn't be displayed at all.\r\n             * */\r\n                errorText = false;\r\n                break;\r\n\r\n            // For cases where the server validRequest() failed to identify the request as valid.\r\n            case 19:\r\n\r\n                errorText = langReference['W_10'];\r\n\r\n            break;\r\n\r\n            default:\r\n                errorText = langReference['W_5'];\r\n        }\r\n\r\n        if(errorText === true) errorText = langReference['W_6'];\r\n\r\n        if(errorText === false) errorText = langReference['W_7'];\r\n\r\n        errorParagraph.innerHTML = errorText + ',&nbsp;' + langReference['W_8'] + ':&nbsp;' + errorCode + '<span title=\"' + langReference['W_9'] + '\" id=\"closeErrorParagraph\">x</span>';\r\n\r\n        document.getElementById('closeErrorParagraph').onclick = function() {\r\n            hide(errorParagraph, 50);\r\n        };    \r\n\r\n        show(errorParagraph, 50);\r\n    }\r\n\r\n    function insertMessagesToRooms(messages, messagesInRooms) {\r\n\r\n        /* Instead of having to create element\r\n         * and than append the html and finally\r\n         * use getElementsByTagNames, I split the\r\n         * messages from the server using messages.split('</div>');\r\n         * later on I add the '</div>' back.\r\n         * */\r\n\r\n        var afterSplit = messages.split('</div>');\r\n\r\n        afterSplit.pop(); // Because when split result with no match there will be an empty string element [\"\"].\r\n\r\n        if(afterSplit.length > 0) {\r\n\r\n            scrollTopFlag = true;\r\n            var roomId;\r\n\r\n            for(var i  = 0; i < afterSplit.length; ++i) {\r\n                roomId = regExpPatterns.idExtractor.exec(afterSplit[i])[1];\r\n\r\n                if(!(roomId in messagesInRooms)) {\r\n                    messagesInRooms[roomId] = [];\r\n                }\r\n                messagesInRooms[roomId].push(afterSplit[i] + '</div>');\r\n            }\r\n        }else{\r\n            scrollTopFlag = false;\r\n        }\r\n    }\r\n\r\n    function addRowsHandler(tableContainer) {\r\n        var kickTds = tableContainer.getElementsByClassName('kick');\r\n        var currentRow;\r\n\r\n        if(kickTds.length > 0) {\r\n            for (var i = 0; i < kickTds.length; ++i) {\r\n\r\n                currentRow = kickTds[i].parentNode;\r\n\r\n                currentRow.onclick =  function(evt) {\r\n                    if(newInvitationDiv.style.display === '' && newRoomDiv.style.display === '') {\r\n                        setText(kickMe, getText(evt.target.parentNode.firstChild));\r\n                        show(newKickDiv, 50);\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    function appendMessages(messagesInRooms, currentRoomInnerText) {\r\n\r\n        var currentRoomId = (currentRoomInnerText === '*' ? '0' : currentRoomInnerText);\r\n\r\n        if(currentRoomId in messagesInRooms) {\r\n            var insertedHtml = '';\r\n\r\n            for(var i = 0; i < messagesInRooms[currentRoomId].length; ++i) {\r\n                insertedHtml += messagesInRooms[currentRoomId][i];\r\n            }\r\n\r\n            messagesContainer.innerHTML = insertedHtml;\r\n\r\n        }else{\r\n            messagesContainer.innerHTML = '';\r\n        }\r\n    }\r\n\r\n    function setText(element, text) {\r\n        if(element.innerText) { // Chrome + IE\r\n            element.innerText = text;\r\n        }else{ // Firefox\r\n            element.textContent = text;\r\n        }\r\n    }\r\n\r\n    function addRoomsHandler(container, messagesInRooms) {\r\n\r\n        var allDivs = container.getElementsByTagName(\"div\");\r\n\r\n        for(var i = 0; i < allDivs.length; ++i) {\r\n            allDivs[i].onclick = function() {\r\n                if(getText(this) === '+') {\r\n                    // The style attribute only gives you information about inline styles, and that is why I check for ''.\r\n                    if(newInvitationDiv.style.display === '' && newKickDiv.style.display === '' && newRoomDeletionDiv.style.display === '') show(newRoomDiv, 50);\r\n                }else if(getText(this) === '↑↓') {\r\n                    initAjax('php/ajax/sessionKill.php', function() {}, true, 'POST', {}, {});\r\n                }else if(getText(this) === '-') {\r\n                    // The style attribute only gives you information about inline styles, and that is why I check for ''.\r\n                    if(newInvitationDiv.style.display === '' && newKickDiv.style.display === '' && newRoomDiv.style.display === '') {\r\n                        initAjax('php/ajax/getRooms.php', function() {\r\n\r\n                            if(this.readyState === 4 && this.status === 200) {\r\n\r\n                                if(this.responseText === '-1') {\r\n                                    reloadPage();\r\n                                }else if(this.responseText === '18') {\r\n\r\n                                    setError(18);\r\n\r\n                                }else{\r\n\r\n                                    deleteThisRoom.innerHTML = this.responseText;\r\n\r\n                                    show(newRoomDeletionDiv, 50);\r\n                                }\r\n                            }\r\n                        }, true, 'POST', {}, {});\r\n                    }\r\n                }else{\r\n                    if(this.id !== 'currentRoom') {\r\n\r\n                        checkAndSetValidRoom(container, getText(this), messagesInRooms);\r\n\r\n                    }else if(this.getAttribute('class') === 'own withInviteOption') {\r\n\r\n                        if(newRoomDiv.style.display === '' && newKickDiv.style.display === '' && newRoomDeletionDiv.style.display === '') {\r\n\r\n                            initAjax('php/ajax/getUsers.php', function() {\r\n\r\n                                if(this.readyState === 4 && this.status === 200) {\r\n\r\n                                                                    \r\n                                    if(this.responseText === '-1') reloadPage();\r\n\r\n                                    if(this.responseText === '') {\r\n\r\n                                        invitationForm.style.display = 'none';\r\n\r\n                                        noUsers.style.display = 'block';\r\n\r\n                                        newInvitationDiv.insertBefore(noUsers, approveInvitationDiv);\r\n\r\n                                    }else{\r\n\r\n                                        noUsers.style.display = 'none';\r\n\r\n                                        invitationForm.style.display = 'block';\r\n\r\n                                        userToInvite.innerHTML = this.responseText;\r\n\r\n                                    }\r\n\r\n                                    show(newInvitationDiv, 50);\r\n                                }\r\n                            }, true, 'POST', {}, {});\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    }\r\n\r\n\r\n    /*********************************************** getter functions ************************************************ (3)\r\n     *\r\n     * getText -  Cross-browser getInnerText function.\r\n     *\r\n     * getRoomByInnerText - Gets the room inner text.\r\n     *\r\n     * getAlreadyExistPattern - The following function is used for the next scenario:\r\n     *                          while the user is in the chat he/she deleted the browser history, the server\r\n     *                          will renew the sessions, the problem is that now there server won't remember\r\n     *                          what rooms it already sent to the client so there will be a duplication\r\n     *                          rooms, so this function will return a regex pattern in the form of '*|+|5|4|2' with\r\n     *                          rooms that exist, now javascriptcan check rooms coming from the server before it\r\n     *                          insert them into the roomList.\r\n     * */\r\n\r\n    function getText(element) {\r\n        if(element.innerText) { // Chrome + IE\r\n            return element.innerText;\r\n        }else{ // Firefox\r\n            return element.textContent;\r\n        }\r\n    }\r\n\r\n    function getRoomByInnerText(container, roomId) {\r\n        var allDivs = container.getElementsByTagName(\"div\");\r\n\r\n        if(roomId === '0') roomId = '*';\r\n\r\n        var returnedRoom; // I predefine returnedRoom in case the iteration couldn't find the room.\r\n\r\n        for(var i = 0; i < allDivs.length; ++i) {\r\n            if(getText(allDivs[i]) === roomId) {\r\n                returnedRoom = allDivs[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        return (returnedRoom === undefined ? false : returnedRoom);\r\n    }\r\n\r\n    function getAlreadyExistPattern(roomsList) {\r\n        var allDivs = roomsList.getElementsByTagName('div');\r\n\r\n        var returnedPattern = '';\r\n        var currentRoomInnerText;\r\n\r\n        for(var i = 0; i < allDivs.length; ++i) {\r\n            currentRoomInnerText = getText(allDivs[i]);\r\n\r\n            if(currentRoomInnerText === '*' || currentRoomInnerText === '+' || currentRoomInnerText === '-' || currentRoomInnerText === '↑↓') continue;\r\n\r\n            returnedPattern += (currentRoomInnerText + '|');\r\n        }\r\n\r\n        /* Slice the last character because for each iteration I add '|' but I want to remove the last '|', In case of\r\n         * an empty string it will just slice empty string(there will not be any error).\r\n         * */\r\n\r\n        return ('^(' + (returnedPattern.slice(0, -1)) + ')$');\r\n    }\r\n\r\n    // This if/else statements are the first step to initiate the chat.\r\n    if (document.readyState === \"complete\") {\r\n        initChat();\r\n    }else{\r\n        // Preferred.\r\n        document.addEventListener(\"DOMContentLoaded\", initChat, false);\r\n\r\n        // In case \"DOMContentLoaded\" is not supported, equal to window.onload.\r\n        window.addEventListener(\"load\", initChat, false);\r\n    }\r\n\r\n})(window, document);"],"sourceRoot":"/source/"}